git rm untrackea el archivo, lo borra de git
git reset vuelve a un estado anterior, pero sigue trackeado

git clone url me clona los archivos y el repositorio remoto al ambiente local.
luego trabajo normal con add y commit, pero cuando quiero mandar el master al remoto, hago un git push

Si quiero actualizar mi repositorio local, hago git fetch, me hace un upgrade desde el repo remoto

si quiero actualizar desde el repo local al directorio de trabajo (archivos), hago merge.

el comando que combina ambas cosas, o sea me trae al mismo tiempo las branches actualizadas de git y los archivos, 
es pull

para llevar mi repo a github o a algun servidor remoto,
tengo que hacer git remote add origin "link del repo" por ejemplo el primero que hice: 
https://github.com/diegoholivera/hyperblog.git

git push origin master: git enviale al origin el master local
pide user y contraseña de github en este caso.

Previamente hay que hacer un git pull para unir lo que esta en el remoto a lo mio, para no pisar el remoto que
es el nuevo master

para poder forzar traer historias no relacionadas, o sea archivos que no tengan nada que ver con los que tengo trackeados,
tengo que hacer:
git pull origin master --allow-unrelated-histories

para generar clave ssh:
ssh-keygen -t rsa -b 4096 (4096 es la complejidad matematica) -C "tuemail"

para ver el estado del agente ssh:
eval $(ssh-agent -s)

va a dar un Agent pid "un nro random"

donde Agent es que el agente ssh esta corriendo
y pid(process ID) es el nro de id del proceso

diego@DESKTOP-HS94V0F ~/.ssh $ eval $(ssh-agent -s)
Agent pid 1182
diego@DESKTOP-HS94V0F ~/.ssh $ ssh-add ~/.ssh/id_rsa
Enter passphrase for /home/diego/.ssh/id_rsa:
Identity added: /home/diego/.ssh/id_rsa (/home/diego/.ssh/id_rsa)
diego@DESKTOP-HS94V0F ~/.ssh $    

aca copie de la consola como agregué la llave ssh privada a mi entorno

para agregarla 1ero la agrego en github, luego desde github hago clone en modo ssh y copio ese link.
Luego desde la consola desde el directorio del proyecto hago git remote set-url origin(donde origin es el nombre del remoto, que es la costumbre, pero si tengo varios remotos en el mismo flujo de trabajo se pueden poner nombres distintos, cualquier cosa, chulavey por ejemplo) "url"

Tags: sirven para ponerle versiones precisas a commits que yo quiera elegir.
git tag -a v"nroVersion" -m "mensaje aclaratorio" "nro acotado commits, ej: 014d59e"

para poder ver los tags asignados de manera completa:

  git show-ref --tags

para pushear los tags:
  git push origin --tags
(solo asi, si de paso tengo un commit que hacer, el commit comun no actualiza los tags en github)

para borrar un tag:
  git tag -d "nombre del tag"

para borrarlo en github(desde consola):
  git push origin :refs/tags/"nombreTag"